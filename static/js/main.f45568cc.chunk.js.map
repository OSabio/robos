{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAe,EAARC,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,gCACI,6BAAKA,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOC,KAAM,SAACC,EAAMC,GAChB,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCOlBC,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,oCACVU,KAAK,SACLC,YAAY,gBAGZC,SAAUH,OCDXI,G,MARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aC6DJC,E,kDAxDX,aAAe,IAAD,8BAGV,gBAmBJC,eAAiB,SAACC,GAId,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAnBzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IATP,E,qDAcd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,S,oBAY9C,WACI,MAAgCC,KAAKN,MAA7BvB,EAAR,EAAQA,OAAQoB,EAAhB,EAAgBA,YAGVU,EAAiB9B,EAAO+B,QAAO,SAAAC,GAIjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAGzD,OAAQjC,EAAOmC,OAGX,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ8B,SAN9B,6C,GA1CUM,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f45568cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${name}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map ( (user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba3 b--green bg-lightest-blue'            \r\n                type='search' \r\n                placeholder='Search robots'\r\n\r\n                //Quando algo for escrito na barra de pesquisa, o evento onChange irá executar a função onSearchChange que está no app.js passando searchChange como parâmetro\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n//aqui, robots é importado com {} pois o arquivo 'robot.js' pode exportar mais de um componente\r\n//import { robots } from './robots';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll.js'\r\n\r\n//Utilizamos class para poder manipular dados dos filhos atraves da tag .this\r\nclass App extends Component {\r\n    constructor() {\r\n\r\n        //faz a chamada do construtor\r\n        super()\r\n\r\n        //state está definindo os conteúdos que podem ser modificados em nosso app.\r\n        //Normalmente, ele fica no componente pai, ou seja, o componente que possui os conteúdos que queremos modificar\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    //react life cycles google\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}))\r\n    }\r\n\r\n    //Este nome não é padrão, é um nome criado, pode ser qualquer coisa\r\n    //Sempre que um método for feito criado pelo aplicativo, ou seja, não é nativo do react, ele deve ser criado com arrow functions (=>) \r\n    onSearchChange = (event) => {\r\n\r\n        //sempre que um estado for modificado, ele deve ser chamado através de this.setState({}) ao invés de this.state.searchfield\r\n        //event.targe.value sempre será usado quando precisamos chegar até o valor de algo, nesse caso precisamos saber o que está escrito em searchField\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n\r\n        //o método .filter() cria um array com todos os elementos que passaram no teste implementado pela função fornecida, nesse caso a função é a robot\r\n        const filteredRobots = robots.filter(robot => {\r\n\r\n            //toLowerCase() é um método que todas as strings possuem e que transforma todas as palavras em lower case\r\n            //includes() é um metodo que determina se uma array (string nesse caso) contém algum elemento, retorna true ou false\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>             \r\n                    <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n\r\n    }\r\n        \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}